// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * image?: {src: string, srcSet?: string, alt?: string} // Image
}} Props

 */
import { routes } from "./chunks/chunk-RIZBGR4E.js";

// virtual:company-ticker-about
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/xJTA04UAeY5dW33ZkaFv/QnhOeb47udDGxDbk93yX/Tg2icrcyw.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Image,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var cycleOrder = ["vgpRx_eUX"];
var serializationHash = "framer-Ja2pQ";
var variantClassNames = {
	vgpRx_eUX: "framer-v-1qbcfhd",
};
var toResponsiveImage = (value) => {
	if (
		typeof value === "object" &&
		value !== null &&
		typeof value.src === "string"
	) {
		return value;
	}
	return typeof value === "string"
		? {
				src: value,
			}
		: void 0;
};
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var getProps = ({ height, id, image, width, ...props }) => {
	var _ref;
	return {
		...props,
		F3YavNc22:
			(_ref = image !== null && image !== void 0 ? image : props.F3YavNc22) !==
				null && _ref !== void 0
				? _ref
				: {
						src: "https://framerusercontent.com/images/scoVthKx4stgeUZyjevD2aGF2gQ.svg",
					},
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, F3YavNc22, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "vgpRx_eUX",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<Image
						{...restProps}
						background={{
							alt: "",
							fit: "fill",
							intrinsicHeight: 62,
							intrinsicWidth: 167,
							pixelHeight: 62,
							pixelWidth: 167,
							sizes:
								(componentViewport === null || componentViewport === void 0
									? void 0
									: componentViewport.width) || "100vw",
							...toResponsiveImage(F3YavNc22),
						}}
						className={cx(
							serializationHash,
							...sharedStyleClassNames,
							"framer-1qbcfhd",
							className,
							classNames,
						)}
						data-border={true}
						data-framer-name={"Variant 1"}
						layoutDependency={layoutDependency}
						layoutId={"vgpRx_eUX"}
						onHoverEnd={() =>
							setGestureState({
								isHovered: false,
							})
						}
						onHoverStart={() =>
							setGestureState({
								isHovered: true,
							})
						}
						onTap={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapCancel={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapStart={() =>
							setGestureState({
								isPressed: true,
							})
						}
						ref={ref !== null && ref !== void 0 ? ref : ref1}
						style={{
							"--border-bottom-width": "0px",
							"--border-color": "rgb(233, 236, 241)",
							"--border-left-width": "0px",
							"--border-right-width": "1px",
							"--border-style": "solid",
							"--border-top-width": "1px",
							...style,
						}}
					/>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-Ja2pQ.framer-9ewzs7, .framer-Ja2pQ .framer-9ewzs7 { display: block; }",
	".framer-Ja2pQ.framer-1qbcfhd { height: 72px; overflow: hidden; position: relative; width: 167px; }",
	'.framer-Ja2pQ[data-border="true"]::after, .framer-Ja2pQ [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerTg2icrcyw = withCSS(Component, css, "framer-Ja2pQ");
var stdin_default = FramerTg2icrcyw;
FramerTg2icrcyw.displayName = "Company Ticker [About]";
FramerTg2icrcyw.defaultProps = {
	height: 72,
	width: 167,
};
addPropertyControls(FramerTg2icrcyw, {
	F3YavNc22: {
		__defaultAssetReference:
			"data:framer/asset-reference,scoVthKx4stgeUZyjevD2aGF2gQ.svg?originalFilename=1.svg&preferredSize=auto",
		title: "Image",
		type: ControlType.ResponsiveImage,
	},
});
addFonts(
	FramerTg2icrcyw,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:company-ticker-about
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders CompanyTickerAboutFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var company_ticker_about_default = ComponentWithRoot;
export { company_ticker_about_default as default };
