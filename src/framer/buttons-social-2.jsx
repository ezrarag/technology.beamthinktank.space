// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * icon?: {src: string, srcSet?: string, alt?: string} // Icon
 * link?: string // Link
 * border?: undefined // Border
}} Props

 */
import { routes } from "./chunks/chunk-RIZBGR4E.js";

// virtual:buttons-social-2
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/axyvLbT7uJcdW5iryvD1/ig09p0JKOGm8kH8FJhfh/pjwzPS1fJ.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Image,
	Link,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var enabledGestures = {
	cLfnkbgsV: {
		hover: true,
	},
};
var cycleOrder = ["cLfnkbgsV"];
var serializationHash = "framer-xXkEG";
var variantClassNames = {
	cLfnkbgsV: "framer-v-1wyv7a9",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants === null || variants === void 0
		? void 0
		: variants.forEach(
				(variant) =>
					variant && Object.assign(nextOverrides, overrides[variant]),
			);
	return nextOverrides;
}
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var toResponsiveImage = (value) => {
	if (
		typeof value === "object" &&
		value !== null &&
		typeof value.src === "string"
	) {
		return value;
	}
	return typeof value === "string"
		? {
				src: value,
			}
		: void 0;
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var getProps = ({ border, height, icon, id, link, width, ...props }) => {
	var _ref, _ref1;
	return {
		...props,
		Cpo8X1wqe: link !== null && link !== void 0 ? link : props.Cpo8X1wqe,
		mqPVG0TjG:
			(_ref = icon !== null && icon !== void 0 ? icon : props.mqPVG0TjG) !==
				null && _ref !== void 0
				? _ref
				: {
						src: "https://framerusercontent.com/images/D8MgD7MyIb1BINqwaarw0E30zQ.svg",
					},
		RQFHxHnNv:
			(_ref1 =
				border !== null && border !== void 0 ? border : props.RQFHxHnNv) !==
				null && _ref1 !== void 0
				? _ref1
				: {
						borderColor: "rgba(255, 255, 255, 0.12)",
						borderStyle: "solid",
						borderWidth: 1,
					},
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const {
		style,
		className,
		layoutId,
		variant,
		mqPVG0TjG,
		Cpo8X1wqe,
		RQFHxHnNv,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "cLfnkbgsV",
		enabledGestures,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	var _RQFHxHnNv_borderBottomWidth,
		_RQFHxHnNv_borderLeftWidth,
		_RQFHxHnNv_borderRightWidth,
		_RQFHxHnNv_borderTopWidth;
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<Link href={Cpo8X1wqe} openInNewTab={true}>
						<motion.a
							{...restProps}
							className={`${cx(serializationHash, ...sharedStyleClassNames, "framer-1wyv7a9", className, classNames)} framer-qohxzo`}
							data-border={true}
							data-framer-name={"Variant 1"}
							layoutDependency={layoutDependency}
							layoutId={"cLfnkbgsV"}
							onHoverEnd={() =>
								setGestureState({
									isHovered: false,
								})
							}
							onHoverStart={() =>
								setGestureState({
									isHovered: true,
								})
							}
							onTap={() =>
								setGestureState({
									isPressed: false,
								})
							}
							onTapCancel={() =>
								setGestureState({
									isPressed: false,
								})
							}
							onTapStart={() =>
								setGestureState({
									isPressed: true,
								})
							}
							ref={ref !== null && ref !== void 0 ? ref : ref1}
							style={{
								"--border-bottom-width": `${(_RQFHxHnNv_borderBottomWidth = RQFHxHnNv.borderBottomWidth) !== null && _RQFHxHnNv_borderBottomWidth !== void 0 ? _RQFHxHnNv_borderBottomWidth : RQFHxHnNv.borderWidth}px`,
								"--border-color": RQFHxHnNv.borderColor,
								"--border-left-width": `${(_RQFHxHnNv_borderLeftWidth = RQFHxHnNv.borderLeftWidth) !== null && _RQFHxHnNv_borderLeftWidth !== void 0 ? _RQFHxHnNv_borderLeftWidth : RQFHxHnNv.borderWidth}px`,
								"--border-right-width": `${(_RQFHxHnNv_borderRightWidth = RQFHxHnNv.borderRightWidth) !== null && _RQFHxHnNv_borderRightWidth !== void 0 ? _RQFHxHnNv_borderRightWidth : RQFHxHnNv.borderWidth}px`,
								"--border-style": RQFHxHnNv.borderStyle,
								"--border-top-width": `${(_RQFHxHnNv_borderTopWidth = RQFHxHnNv.borderTopWidth) !== null && _RQFHxHnNv_borderTopWidth !== void 0 ? _RQFHxHnNv_borderTopWidth : RQFHxHnNv.borderWidth}px`,
								borderBottomLeftRadius: 40,
								borderBottomRightRadius: 40,
								borderTopLeftRadius: 40,
								borderTopRightRadius: 40,
								...style,
							}}
							{...addPropertyOverrides(
								{
									"cLfnkbgsV-hover": {
										"data-framer-name": void 0,
									},
								},
								baseVariant,
								gestureVariant,
							)}
						>
							<Image
								background={{
									alt: "",
									fit: "fill",
									intrinsicHeight: 24,
									intrinsicWidth: 24,
									pixelHeight: 24,
									pixelWidth: 24,
									sizes: "32px",
									...toResponsiveImage(mqPVG0TjG),
								}}
								className={"framer-1kh6gin"}
								layoutDependency={layoutDependency}
								layoutId={"ZRUidVbRg"}
							/>
						</motion.a>
					</Link>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-xXkEG.framer-qohxzo, .framer-xXkEG .framer-qohxzo { display: block; }",
	".framer-xXkEG.framer-1wyv7a9 { align-content: flex-start; align-items: flex-start; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: flex-start; overflow: hidden; padding: 6px 6px 6px 6px; position: relative; text-decoration: none; width: min-content; will-change: var(--framer-will-change-override, transform); }",
	".framer-xXkEG .framer-1kh6gin { flex: none; height: 32px; overflow: visible; position: relative; width: 32px; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-xXkEG.framer-1wyv7a9 { gap: 0px; } .framer-xXkEG.framer-1wyv7a9 > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-xXkEG.framer-1wyv7a9 > :first-child { margin-left: 0px; } .framer-xXkEG.framer-1wyv7a9 > :last-child { margin-right: 0px; } }",
	".framer-xXkEG.framer-v-1wyv7a9.hover .framer-1kh6gin { order: 0; }",
	'.framer-xXkEG[data-border="true"]::after, .framer-xXkEG [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerpjwzPS1fJ = withCSS(Component, css, "framer-xXkEG");
var stdin_default = FramerpjwzPS1fJ;
FramerpjwzPS1fJ.displayName = "Buttons [Social 2]";
FramerpjwzPS1fJ.defaultProps = {
	height: 44,
	width: 44,
};
addPropertyControls(FramerpjwzPS1fJ, {
	mqPVG0TjG: {
		__defaultAssetReference:
			"data:framer/asset-reference,D8MgD7MyIb1BINqwaarw0E30zQ.svg?originalFilename=instagram-pixel.svg&preferredSize=auto",
		title: "Icon",
		type: ControlType.ResponsiveImage,
	},
	Cpo8X1wqe: {
		title: "Link",
		type: ControlType.Link,
	},
	RQFHxHnNv: {
		defaultValue: {
			borderColor: "rgba(255, 255, 255, 0.12)",
			borderStyle: "solid",
			borderWidth: 1,
		},
		title: "Border",
		type: ControlType.Border,
	},
});
addFonts(
	FramerpjwzPS1fJ,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:buttons-social-2
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders ButtonsSocial2FramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var buttons_social_2_default = ComponentWithRoot;
export { buttons_social_2_default as default };
