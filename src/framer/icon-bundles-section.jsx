// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * image?: {src: string, srcSet?: string, alt?: string} // Image
 * background?: string // Background
}} Props

 */
import { routes } from "./chunks/chunk-RIZBGR4E.js";

// virtual:icon-bundles-section
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/kpS8PvlRUg4s0uQQbyCt/C6To7eGLXlPotZe8pAzC/eO2dwVWwg.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Image,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var cycleOrder = ["k_3x_FT4C"];
var serializationHash = "framer-Pzvni";
var variantClassNames = {
	k_3x_FT4C: "framer-v-10xjrn5",
};
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var toResponsiveImage = (value) => {
	if (
		typeof value === "object" &&
		value !== null &&
		typeof value.src === "string"
	) {
		return value;
	}
	return typeof value === "string"
		? {
				src: value,
			}
		: void 0;
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var getProps = ({ background, height, id, image, width, ...props }) => {
	var _ref, _ref1;
	return {
		...props,
		gLwHqCyQo:
			(_ref =
				background !== null && background !== void 0
					? background
					: props.gLwHqCyQo) !== null && _ref !== void 0
				? _ref
				: "rgb(215, 238, 255)",
		O_0GGe_Mt:
			(_ref1 = image !== null && image !== void 0 ? image : props.O_0GGe_Mt) !==
				null && _ref1 !== void 0
				? _ref1
				: {
						src: "https://framerusercontent.com/images/5nENu0VVp237u00dmXaNlqdfT44.svg",
					},
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const {
		style,
		className,
		layoutId,
		variant,
		O_0GGe_Mt,
		gLwHqCyQo,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "k_3x_FT4C",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						className={cx(
							serializationHash,
							...sharedStyleClassNames,
							"framer-10xjrn5",
							className,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						layoutDependency={layoutDependency}
						layoutId={"k_3x_FT4C"}
						onHoverEnd={() =>
							setGestureState({
								isHovered: false,
							})
						}
						onHoverStart={() =>
							setGestureState({
								isHovered: true,
							})
						}
						onTap={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapCancel={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapStart={() =>
							setGestureState({
								isPressed: true,
							})
						}
						ref={ref !== null && ref !== void 0 ? ref : ref1}
						style={{
							backgroundColor: gLwHqCyQo,
							borderBottomLeftRadius: 30,
							borderBottomRightRadius: 30,
							borderTopLeftRadius: 30,
							borderTopRightRadius: 30,
							...style,
						}}
					>
						<Image
							background={{
								alt: "",
								fit: "fill",
								intrinsicHeight: 48,
								intrinsicWidth: 48,
								pixelHeight: 48,
								pixelWidth: 48,
								sizes: "32px",
								...toResponsiveImage(O_0GGe_Mt),
							}}
							className={"framer-1fqvh6r"}
							data-framer-name={"Frame 1"}
							layoutDependency={layoutDependency}
							layoutId={"WzG0buMby"}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-Pzvni.framer-1mdtk9d, .framer-Pzvni .framer-1mdtk9d { display: block; }",
	".framer-Pzvni.framer-10xjrn5 { height: 64px; overflow: hidden; position: relative; width: 64px; will-change: var(--framer-will-change-override, transform); }",
	".framer-Pzvni .framer-1fqvh6r { flex: none; height: 32px; left: calc(51.5625% - 32px / 2); overflow: visible; position: absolute; top: calc(50% - 32px / 2); width: 32px; }",
];
var FramereO2dwVWwg = withCSS(Component, css, "framer-Pzvni");
var stdin_default = FramereO2dwVWwg;
FramereO2dwVWwg.displayName = "Icon [Bundles Section]";
FramereO2dwVWwg.defaultProps = {
	height: 64,
	width: 64,
};
addPropertyControls(FramereO2dwVWwg, {
	O_0GGe_Mt: {
		__defaultAssetReference:
			"data:framer/asset-reference,5nENu0VVp237u00dmXaNlqdfT44.svg?originalFilename=Frame+1.svg&preferredSize=auto",
		title: "Image",
		type: ControlType.ResponsiveImage,
	},
	gLwHqCyQo: {
		defaultValue: "rgb(215, 238, 255)",
		title: "Background",
		type: ControlType.Color,
	},
});
addFonts(
	FramereO2dwVWwg,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:icon-bundles-section
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders IconBundlesSectionFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var icon_bundles_section_default = ComponentWithRoot;
export { icon_bundles_section_default as default };
