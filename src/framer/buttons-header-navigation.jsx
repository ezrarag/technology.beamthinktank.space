// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * buttonName?: string // Button Name
 * link?: string // Link
 * padding?: number // Padding
}} Props

 */
import { routes } from "./chunks/chunk-RIZBGR4E.js";

// virtual:buttons-header-navigation
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/6DUIQOFqmiHSYRDGOP8H/SN0LDu9ixB75wCMKxod7/BUKMnG2Zf.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Link,
	RichText,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var enabledGestures = {
	r4JmGubIl: {
		hover: true,
	},
};
var cycleOrder = ["r4JmGubIl"];
var serializationHash = "framer-lIUsV";
var variantClassNames = {
	r4JmGubIl: "framer-v-9l6msy",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants === null || variants === void 0
		? void 0
		: variants.forEach(
				(variant) =>
					variant && Object.assign(nextOverrides, overrides[variant]),
			);
	return nextOverrides;
}
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var getProps = ({ buttonName, height, id, link, padding, width, ...props }) => {
	var _ref, _ref1;
	return {
		...props,
		N8sM1cfth:
			(_ref =
				buttonName !== null && buttonName !== void 0
					? buttonName
					: props.N8sM1cfth) !== null && _ref !== void 0
				? _ref
				: "Homepage",
		ppWgxVyAk:
			(_ref1 =
				padding !== null && padding !== void 0 ? padding : props.ppWgxVyAk) !==
				null && _ref1 !== void 0
				? _ref1
				: 9,
		WNTcHXHiE: link !== null && link !== void 0 ? link : props.WNTcHXHiE,
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const {
		style,
		className,
		layoutId,
		variant,
		N8sM1cfth,
		WNTcHXHiE,
		ppWgxVyAk,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "r4JmGubIl",
		enabledGestures,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<Link href={WNTcHXHiE}>
						<motion.a
							{...restProps}
							className={`${cx(serializationHash, ...sharedStyleClassNames, "framer-9l6msy", className, classNames)} framer-bci5o1`}
							data-border={true}
							data-framer-name={"Variant 1"}
							layoutDependency={layoutDependency}
							layoutId={"r4JmGubIl"}
							onHoverEnd={() =>
								setGestureState({
									isHovered: false,
								})
							}
							onHoverStart={() =>
								setGestureState({
									isHovered: true,
								})
							}
							onTap={() =>
								setGestureState({
									isPressed: false,
								})
							}
							onTapCancel={() =>
								setGestureState({
									isPressed: false,
								})
							}
							onTapStart={() =>
								setGestureState({
									isPressed: true,
								})
							}
							ref={ref !== null && ref !== void 0 ? ref : ref1}
							style={{
								"--border-bottom-width": "1px",
								"--border-color": "rgba(52, 65, 74, 0)",
								"--border-left-width": "1px",
								"--border-right-width": "1px",
								"--border-style": "solid",
								"--border-top-width": "1px",
								"--jw6cfa": ppWgxVyAk,
								borderBottomLeftRadius: 130,
								borderBottomRightRadius: 130,
								borderTopLeftRadius: 130,
								borderTopRightRadius: 130,
								...style,
							}}
							variants={{
								"r4JmGubIl-hover": {
									"--border-color": "rgba(52, 65, 74, 0.08)",
									borderBottomLeftRadius: 50,
									borderBottomRightRadius: 50,
									borderTopLeftRadius: 50,
									borderTopRightRadius: 50,
								},
							}}
							{...addPropertyOverrides(
								{
									"r4JmGubIl-hover": {
										"data-framer-name": void 0,
									},
								},
								baseVariant,
								gestureVariant,
							)}
						>
							<RichText
								__fromCanvasComponent={true}
								className={"framer-1ns3559"}
								data-framer-name={"Homepage"}
								fonts={["GF;Switzer-regular"]}
								layoutDependency={layoutDependency}
								layoutId={"GwXD5YycC"}
								style={{
									"--extracted-1w3ko1f": "rgba(52, 65, 74, 1)",
									"--framer-paragraph-spacing": "0px",
								}}
								text={N8sM1cfth}
								verticalAlignment={"top"}
								withExternalLayout={true}
							>
								<React.Fragment>
									<motion.p
										style={{
											"--framer-font-size": "14px",
											"--framer-line-height": "22px",
											"--framer-text-alignment": "center",
										}}
									>
										<motion.span
											style={{
												"--font-selector": "R0Y7U3dpdHplci1yZWd1bGFy",
												"--framer-font-family": '"Switzer"',
												"--framer-font-size": "14px",
												"--framer-letter-spacing": "-0.01em",
												"--framer-text-color":
													"var(--extracted-1w3ko1f, rgba(52, 65, 74, 1))",
											}}
										>
											{"Homepage"}
										</motion.span>
									</motion.p>
								</React.Fragment>
							</RichText>
						</motion.a>
					</Link>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-lIUsV.framer-bci5o1, .framer-lIUsV .framer-bci5o1 { display: block; }",
	".framer-lIUsV.framer-9l6msy { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 48px; justify-content: flex-start; overflow: visible; padding: calc(max(0, var(--jw6cfa)) * 1px); position: relative; text-decoration: none; width: min-content; }",
	".framer-lIUsV .framer-1ns3559 { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-lIUsV.framer-9l6msy { gap: 0px; } .framer-lIUsV.framer-9l6msy > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-lIUsV.framer-9l6msy > :first-child { margin-left: 0px; } .framer-lIUsV.framer-9l6msy > :last-child { margin-right: 0px; } }",
	'.framer-lIUsV[data-border="true"]::after, .framer-lIUsV [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerBUKMnG2Zf = withCSS(Component, css, "framer-lIUsV");
var stdin_default = FramerBUKMnG2Zf;
FramerBUKMnG2Zf.displayName = "Buttons [Header Navigation]";
FramerBUKMnG2Zf.defaultProps = {
	height: 48,
	width: 87,
};
addPropertyControls(FramerBUKMnG2Zf, {
	N8sM1cfth: {
		defaultValue: "Homepage",
		displayTextArea: false,
		title: "Button Name",
		type: ControlType.String,
	},
	WNTcHXHiE: {
		title: "Link",
		type: ControlType.Link,
	},
	ppWgxVyAk: {
		defaultValue: 9,
		min: 0,
		title: "Padding",
		type: ControlType.Number,
	},
});
addFonts(
	FramerBUKMnG2Zf,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:buttons-header-navigation
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders ButtonsHeaderNavigationFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var buttons_header_navigation_default = ComponentWithRoot;
export { buttons_header_navigation_default as default };
