// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Comp' | 'Open Comp' // Variant
 * text?: string // Text
 * text2?: string // Text 2
 * border?: undefined // Border
}} Props

 */
import { className, css, fonts } from "./chunks/chunk-2ALKGF66.js";
import { routes } from "./chunks/chunk-RIZBGR4E.js";

// virtual:f-a-q-card-about-homepage
import { Fragment as Fragment3 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/jfFWCvNWbEFgu6z2R4g4/RhO2uEv5kpyQLQkJFHOx/LSS_WgKNp.js
import { jsx as _jsx2, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts as addFonts2,
	addPropertyControls as addPropertyControls2,
	ComponentViewportProvider,
	ControlType as ControlType2,
	cx as cx2,
	getFonts,
	getFontsFromSharedStyle,
	RichText,
	useActiveVariantCallback,
	useComponentViewport as useComponentViewport2,
	useLocaleInfo as useLocaleInfo2,
	useVariantState as useVariantState2,
	withCSS as withCSS2,
} from "unframer";
import {
	LayoutGroup as LayoutGroup2,
	motion as motion2,
	MotionConfigContext as MotionConfigContext2,
} from "unframer";
import * as React2 from "react";

// /:https://framerusercontent.com/modules/bna9SFmWBpa3UXiGz0Xt/Ojboh7ZonC2CpeKZ4t7G/TfE4A6sPn.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Image,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var cycleOrder = ["uME7CCWfT"];
var serializationHash = "framer-g6JIv";
var variantClassNames = {
	uME7CCWfT: "framer-v-10an4zu",
};
var toResponsiveImage = (value) => {
	if (
		typeof value === "object" &&
		value !== null &&
		typeof value.src === "string"
	) {
		return value;
	}
	return typeof value === "string"
		? {
				src: value,
			}
		: void 0;
};
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var getProps = ({ height, id, image, width, ...props }) => {
	var _ref;
	return {
		...props,
		RCTHAppWm:
			(_ref = image !== null && image !== void 0 ? image : props.RCTHAppWm) !==
				null && _ref !== void 0
				? _ref
				: {
						src: "https://framerusercontent.com/images/lUkQE2KdWLm5q8h6Br1naCgOMw.svg",
					},
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		RCTHAppWm,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "uME7CCWfT",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<Image
						{...restProps}
						background={{
							alt: "",
							fit: "fill",
							intrinsicHeight: 24,
							intrinsicWidth: 24,
							pixelHeight: 24,
							pixelWidth: 24,
							sizes:
								(componentViewport === null || componentViewport === void 0
									? void 0
									: componentViewport.width) || "100vw",
							...toResponsiveImage(RCTHAppWm),
						}}
						className={cx(
							serializationHash,
							...sharedStyleClassNames,
							"framer-10an4zu",
							className2,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						layoutDependency={layoutDependency}
						layoutId={"uME7CCWfT"}
						onHoverEnd={() =>
							setGestureState({
								isHovered: false,
							})
						}
						onHoverStart={() =>
							setGestureState({
								isHovered: true,
							})
						}
						onTap={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapCancel={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapStart={() =>
							setGestureState({
								isPressed: true,
							})
						}
						ref={ref !== null && ref !== void 0 ? ref : ref1}
						style={{
							...style,
						}}
					/>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css2 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-g6JIv.framer-173gsc9, .framer-g6JIv .framer-173gsc9 { display: block; }",
	".framer-g6JIv.framer-10an4zu { height: 24px; overflow: hidden; position: relative; width: 24px; }",
];
var FramerTfE4A6sPn = withCSS(Component, css2, "framer-g6JIv");
var stdin_default = FramerTfE4A6sPn;
FramerTfE4A6sPn.displayName = "Button [IconButton]";
FramerTfE4A6sPn.defaultProps = {
	height: 24,
	width: 24,
};
addPropertyControls(FramerTfE4A6sPn, {
	RCTHAppWm: {
		__defaultAssetReference:
			"data:framer/asset-reference,lUkQE2KdWLm5q8h6Br1naCgOMw.svg?originalFilename=arrow-down.svg&preferredSize=auto",
		title: "Image",
		type: ControlType.ResponsiveImage,
	},
});
addFonts(
	FramerTfE4A6sPn,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// /:https://framerusercontent.com/modules/jfFWCvNWbEFgu6z2R4g4/RhO2uEv5kpyQLQkJFHOx/LSS_WgKNp.js
var ButtonIconButtonFonts = getFonts(stdin_default);
var enabledGestures = {
	MQfpSogYY: {
		hover: true,
	},
};
var cycleOrder2 = ["MQfpSogYY", "arAG6D8ya"];
var serializationHash2 = "framer-kb10g";
var variantClassNames2 = {
	arAG6D8ya: "framer-v-16ddj4o",
	MQfpSogYY: "framer-v-5vz0u4",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants === null || variants === void 0
		? void 0
		: variants.forEach(
				(variant) =>
					variant && Object.assign(nextOverrides, overrides[variant]),
			);
	return nextOverrides;
}
var transition12 = {
	delay: 0,
	duration: 0.2,
	ease: [0.44, 0, 0.56, 1],
	type: "tween",
};
var addImageAlt = (image, alt) => {
	if (!image || typeof image !== "object") {
		return;
	}
	return {
		...image,
		alt,
	};
};
var Transition2 = ({ value, children }) => {
	const config = React2.useContext(MotionConfigContext2);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React2.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext2.Provider value={contextValue}>
			{children}
		</MotionConfigContext2.Provider>
	);
};
var Variants2 = motion2(React2.Fragment);
var humanReadableVariantMap = {
	"Open Comp": "arAG6D8ya",
	Comp: "MQfpSogYY",
};
var getProps2 = ({ border, height, id, text, text2, width, ...props }) => {
	var _ref, _ref1, _ref2, _humanReadableVariantMap_props_variant, _ref3;
	return {
		...props,
		Aq7oFSyYs:
			(_ref = text2 !== null && text2 !== void 0 ? text2 : props.Aq7oFSyYs) !==
				null && _ref !== void 0
				? _ref
				: "Project timelines can vary considerably based on the scope and complexity of the work involved. However, we strive to provide accurate estimates and work efficiently to deliver within agreed-upon timelines. Regular communication and project management ensure that we stay on track and address any potential delays or challenges promptly.",
		BDIHZ9jmY:
			(_ref1 = text !== null && text !== void 0 ? text : props.BDIHZ9jmY) !==
				null && _ref1 !== void 0
				? _ref1
				: "How do you measure the success of a project?",
		SwVl42GCX:
			(_ref2 =
				border !== null && border !== void 0 ? border : props.SwVl42GCX) !==
				null && _ref2 !== void 0
				? _ref2
				: {
						borderBottomWidth: 1,
						borderColor:
							'var(--token-a441ca95-8d02-4c53-b63e-38f78f03c624, rgb(233, 237, 241)) /* {"name":"Border / Normal [50]"} */',
						borderLeftWidth: 0,
						borderRightWidth: 0,
						borderStyle: "solid",
						borderTopWidth: 0,
					},
		variant:
			(_ref3 =
				(_humanReadableVariantMap_props_variant =
					humanReadableVariantMap[props.variant]) !== null &&
				_humanReadableVariantMap_props_variant !== void 0
					? _humanReadableVariantMap_props_variant
					: props.variant) !== null && _ref3 !== void 0
				? _ref3
				: "MQfpSogYY",
	};
};
var createLayoutDependency2 = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component2 = /* @__PURE__ */ React2.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo2();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		BDIHZ9jmY,
		Aq7oFSyYs,
		SwVl42GCX,
		...restProps
	} = getProps2(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState2({
		cycleOrder: cycleOrder2,
		defaultVariant: "MQfpSogYY",
		enabledGestures,
		variant,
		variantClassNames: variantClassNames2,
	});
	const layoutDependency = createLayoutDependency2(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onTap4m8oeq = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		setVariant("arAG6D8ya");
	});
	const onTap1apynjp = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		setVariant("MQfpSogYY");
	});
	const ref1 = React2.useRef(null);
	const isDisplayed = () => {
		if (baseVariant === "arAG6D8ya") return true;
		return false;
	};
	const defaultLayoutId = React2.useId();
	const sharedStyleClassNames = [className];
	const componentViewport = useComponentViewport2();
	var _SwVl42GCX_borderBottomWidth,
		_SwVl42GCX_borderLeftWidth,
		_SwVl42GCX_borderRightWidth,
		_SwVl42GCX_borderTopWidth;
	return (
		<LayoutGroup2
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants2 animate={variants} initial={false}>
				<Transition2 value={transition12}>
					<motion2.div
						{...restProps}
						className={cx2(
							serializationHash2,
							...sharedStyleClassNames,
							"framer-5vz0u4",
							className2,
							classNames,
						)}
						data-border={true}
						data-framer-name={"Comp"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"MQfpSogYY"}
						onHoverEnd={() =>
							setGestureState({
								isHovered: false,
							})
						}
						onHoverStart={() =>
							setGestureState({
								isHovered: true,
							})
						}
						onTap={onTap4m8oeq}
						onTapCancel={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapStart={() =>
							setGestureState({
								isPressed: true,
							})
						}
						ref={ref !== null && ref !== void 0 ? ref : ref1}
						style={{
							"--border-bottom-width": `${(_SwVl42GCX_borderBottomWidth = SwVl42GCX.borderBottomWidth) !== null && _SwVl42GCX_borderBottomWidth !== void 0 ? _SwVl42GCX_borderBottomWidth : SwVl42GCX.borderWidth}px`,
							"--border-color": SwVl42GCX.borderColor,
							"--border-left-width": `${(_SwVl42GCX_borderLeftWidth = SwVl42GCX.borderLeftWidth) !== null && _SwVl42GCX_borderLeftWidth !== void 0 ? _SwVl42GCX_borderLeftWidth : SwVl42GCX.borderWidth}px`,
							"--border-right-width": `${(_SwVl42GCX_borderRightWidth = SwVl42GCX.borderRightWidth) !== null && _SwVl42GCX_borderRightWidth !== void 0 ? _SwVl42GCX_borderRightWidth : SwVl42GCX.borderWidth}px`,
							"--border-style": SwVl42GCX.borderStyle,
							"--border-top-width": `${(_SwVl42GCX_borderTopWidth = SwVl42GCX.borderTopWidth) !== null && _SwVl42GCX_borderTopWidth !== void 0 ? _SwVl42GCX_borderTopWidth : SwVl42GCX.borderWidth}px`,
							backgroundColor: "rgb(255, 255, 255)",
							...style,
						}}
						variants={{
							"MQfpSogYY-hover": {
								backgroundColor:
									"var(--token-649e4348-d568-4d35-a3ff-07509e437f36, rgb(246, 248, 250))",
							},
						}}
						{...addPropertyOverrides(
							{
								"MQfpSogYY-hover": {
									"data-framer-name": void 0,
								},
								arAG6D8ya: {
									"data-framer-name": "Open Comp",
									onTap: onTap1apynjp,
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion2.div
							className={"framer-1864jmk"}
							layoutDependency={layoutDependency}
							layoutId={"KLkTNDE5S"}
						>
							<RichText
								__fromCanvasComponent={true}
								className={"framer-1mwvw8t"}
								data-framer-name={
									"How do you measure the success of a project?"
								}
								fonts={["Inter"]}
								layoutDependency={layoutDependency}
								layoutId={"Cw8ItJYSr"}
								style={{
									"--framer-paragraph-spacing": "0px",
								}}
								text={BDIHZ9jmY}
								verticalAlignment={"top"}
								withExternalLayout={true}
							>
								<React2.Fragment>
									<motion2.h1
										className={"framer-styles-preset-1gh6fhc"}
										data-styles-preset={"wOLsulpos"}
									>
										{"How do you measure the success of a project?"}
									</motion2.h1>
								</React2.Fragment>
							</RichText>
							{isDisplayed() && (
								<RichText
									__fromCanvasComponent={true}
									className={"framer-xmbfa"}
									data-framer-name={
										"How do you measure the success of a project?"
									}
									fonts={["Inter"]}
									layoutDependency={layoutDependency}
									layoutId={"NZHxOGZP6"}
									style={{
										"--extracted-r6o4lv": "rgb(129, 136, 152)",
										"--framer-paragraph-spacing": "0px",
									}}
									text={Aq7oFSyYs}
									verticalAlignment={"top"}
									withExternalLayout={true}
								>
									<React2.Fragment>
										<motion2.p
											style={{
												"--framer-font-size": "14px",
												"--framer-letter-spacing": "-0.5px",
												"--framer-line-height": "22px",
												"--framer-text-color":
													"var(--extracted-r6o4lv, rgb(129, 136, 152))",
											}}
										>
											{
												"Project timelines can vary considerably based on the scope and complexity of the work involved. However, we strive to provide accurate estimates and work efficiently to deliver within agreed-upon timelines. Regular communication and project management ensure that we stay on track and address any potential delays or challenges promptly."
											}
										</motion2.p>
									</React2.Fragment>
								</RichText>
							)}
						</motion2.div>
						<motion2.div
							className={"framer-l7r62j"}
							data-framer-name={"Arrow-Down"}
							layoutDependency={layoutDependency}
							layoutId={"MeAs9fw5E"}
						>
							<ComponentViewportProvider width={"24px"}>
								<motion2.div
									className={"framer-cz7ko8-container"}
									layoutDependency={layoutDependency}
									layoutId={"efY7nvntT-container"}
								>
									{_jsx2(stdin_default, {
										height: "100%",
										id: "efY7nvntT",
										layoutId: "efY7nvntT",
										style: {
											height: "100%",
											width: "100%",
										},
										width: "100%",
										...addPropertyOverrides(
											{
												arAG6D8ya: {
													RCTHAppWm: addImageAlt(
														{
															src: "https://framerusercontent.com/images/e9sv3cxgUb9RvkW3r4sti2sRmtw.svg",
														},
														"",
													),
												},
											},
											baseVariant,
											gestureVariant,
										),
									})}
								</motion2.div>
							</ComponentViewportProvider>
						</motion2.div>
					</motion2.div>
				</Transition2>
			</Variants2>
		</LayoutGroup2>
	);
});
var css3 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-kb10g.framer-1dph7ec, .framer-kb10g .framer-1dph7ec { display: block; }",
	".framer-kb10g.framer-5vz0u4 { align-content: flex-start; align-items: flex-start; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 24px; height: min-content; justify-content: flex-start; overflow: hidden; padding: 32px; position: relative; width: 692px; }",
	".framer-kb10g .framer-1864jmk { align-content: flex-start; align-items: flex-start; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 8px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: 1px; }",
	".framer-kb10g .framer-1mwvw8t, .framer-kb10g .framer-xmbfa { flex: none; height: auto; position: relative; white-space: pre-wrap; width: 100%; word-break: break-word; word-wrap: break-word; }",
	".framer-kb10g .framer-l7r62j { flex: none; height: 24px; overflow: hidden; position: relative; width: 24px; }",
	".framer-kb10g .framer-cz7ko8-container { bottom: 0px; flex: none; left: 0px; position: absolute; right: 0px; top: 0px; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-kb10g.framer-5vz0u4, .framer-kb10g .framer-1864jmk { gap: 0px; } .framer-kb10g.framer-5vz0u4 > * { margin: 0px; margin-left: calc(24px / 2); margin-right: calc(24px / 2); } .framer-kb10g.framer-5vz0u4 > :first-child { margin-left: 0px; } .framer-kb10g.framer-5vz0u4 > :last-child { margin-right: 0px; } .framer-kb10g .framer-1864jmk > * { margin: 0px; margin-bottom: calc(8px / 2); margin-top: calc(8px / 2); } .framer-kb10g .framer-1864jmk > :first-child { margin-top: 0px; } .framer-kb10g .framer-1864jmk > :last-child { margin-bottom: 0px; } }",
	".framer-kb10g.framer-v-16ddj4o.framer-5vz0u4, .framer-kb10g.framer-v-5vz0u4.hover.framer-5vz0u4 { padding: 32px 36px 32px 36px; }",
	...css,
	'.framer-kb10g[data-border="true"]::after, .framer-kb10g [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerLSS_WgKNp = withCSS2(Component2, css3, "framer-kb10g");
var stdin_default2 = FramerLSS_WgKNp;
FramerLSS_WgKNp.displayName = "F.A.Q. Card [About-Homepage]";
FramerLSS_WgKNp.defaultProps = {
	height: 88,
	width: 692,
};
addPropertyControls2(FramerLSS_WgKNp, {
	variant: {
		options: ["MQfpSogYY", "arAG6D8ya"],
		optionTitles: ["Comp", "Open Comp"],
		title: "Variant",
		type: ControlType2.Enum,
	},
	BDIHZ9jmY: {
		defaultValue: "How do you measure the success of a project?",
		displayTextArea: false,
		title: "Text",
		type: ControlType2.String,
	},
	Aq7oFSyYs: {
		defaultValue:
			"Project timelines can vary considerably based on the scope and complexity of the work involved. However, we strive to provide accurate estimates and work efficiently to deliver within agreed-upon timelines. Regular communication and project management ensure that we stay on track and address any potential delays or challenges promptly.",
		displayTextArea: true,
		title: "Text 2",
		type: ControlType2.String,
	},
	SwVl42GCX: {
		defaultValue: {
			borderBottomWidth: 1,
			borderColor:
				'var(--token-a441ca95-8d02-4c53-b63e-38f78f03c624, rgb(233, 237, 241)) /* {"name":"Border / Normal [50]"} */',
			borderLeftWidth: 0,
			borderRightWidth: 0,
			borderStyle: "solid",
			borderTopWidth: 0,
		},
		title: "Border",
		type: ControlType2.Border,
	},
});
addFonts2(
	FramerLSS_WgKNp,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://app.framerstatic.com/Inter-Regular.cyrillic-ext-CFTLRB35.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://app.framerstatic.com/Inter-Regular.cyrillic-KKLZBALH.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://app.framerstatic.com/Inter-Regular.greek-ext-ULEBLIFV.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://app.framerstatic.com/Inter-Regular.greek-IRHSNFQB.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://app.framerstatic.com/Inter-Regular.latin-ext-VZDUGU3Q.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://app.framerstatic.com/Inter-Regular.latin-JLQMKCHE.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://app.framerstatic.com/Inter-Regular.vietnamese-QK7VSWXK.woff2",
					weight: "400",
				},
			],
		},
		...ButtonIconButtonFonts,
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:f-a-q-card-about-homepage
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "MQfpSogYY",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders FAQCardAboutHomepageFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var f_a_q_card_about_homepage_default = ComponentWithRoot;
export { f_a_q_card_about_homepage_default as default };
