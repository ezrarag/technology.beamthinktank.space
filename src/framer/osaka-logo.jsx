// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { routes } from "./chunks/chunk-RIZBGR4E.js";

// virtual:osaka-logo
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/6a7feBTeoPsKA0kHwogd/fnMjVAmUWnRozVvc3zpc/YkPD58HJm.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	cx,
	Image,
	Link,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var cycleOrder = ["kSV3daqYj"];
var serializationHash = "framer-pFTa0";
var variantClassNames = {
	kSV3daqYj: "framer-v-15a3yon",
};
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, ...restProps } = getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "kSV3daqYj",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<Link
						href={{
							webPageId: "augiA20Il",
						}}
						openInNewTab={false}
					>
						<Image
							{...restProps}
							as={"a"}
							background={{
								alt: "",
								fit: "fill",
								intrinsicHeight: 20,
								intrinsicWidth: 168,
								pixelHeight: 20,
								pixelWidth: 168,
								src: "https://framerusercontent.com/images/CAMi1l77DoX4bD3fmSbkpIO7vM.svg",
							}}
							className={`${cx(serializationHash, ...sharedStyleClassNames, "framer-15a3yon", className, classNames)} framer-1e1dd36`}
							data-framer-name={"Variant 1"}
							layoutDependency={layoutDependency}
							layoutId={"kSV3daqYj"}
							onHoverEnd={() =>
								setGestureState({
									isHovered: false,
								})
							}
							onHoverStart={() =>
								setGestureState({
									isHovered: true,
								})
							}
							onTap={() =>
								setGestureState({
									isPressed: false,
								})
							}
							onTapCancel={() =>
								setGestureState({
									isPressed: false,
								})
							}
							onTapStart={() =>
								setGestureState({
									isPressed: true,
								})
							}
							ref={ref !== null && ref !== void 0 ? ref : ref1}
							style={{
								...style,
							}}
						/>
					</Link>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-pFTa0.framer-1e1dd36, .framer-pFTa0 .framer-1e1dd36 { display: block; }",
	".framer-pFTa0.framer-15a3yon { height: 20px; overflow: hidden; position: relative; text-decoration: none; width: 169px; }",
];
var FramerYkPD58HJm = withCSS(Component, css, "framer-pFTa0");
var stdin_default = FramerYkPD58HJm;
FramerYkPD58HJm.displayName = "Osaka [Logo]";
FramerYkPD58HJm.defaultProps = {
	height: 20,
	width: 169,
};
addFonts(
	FramerYkPD58HJm,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:osaka-logo
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders OsakaLogoFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var osaka_logo_default = ComponentWithRoot;
export { osaka_logo_default as default };
