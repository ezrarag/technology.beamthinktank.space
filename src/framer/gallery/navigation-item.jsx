// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Active' | 'Inactive' // Variant
 * image?: {src: string, srcSet?: string, alt?: string} // Image
 * tap?: Function // Tap
}} Props

 */
import { routes } from "../chunks/chunk-RIZBGR4E.js";

// virtual:gallery/navigation-item
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/vCSUjPGqgfWlaQ6l3Etu/SI4mcPHYAozI8CUOCqw0/jXTAGtevO.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Image,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var enabledGestures = {
	qmHLs_fes: {
		hover: true,
	},
};
var cycleOrder = ["Jn95M3DMW", "qmHLs_fes"];
var serializationHash = "framer-Bzy4B";
var variantClassNames = {
	Jn95M3DMW: "framer-v-ysud0u",
	qmHLs_fes: "framer-v-1up87w8",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants === null || variants === void 0
		? void 0
		: variants.forEach(
				(variant) =>
					variant && Object.assign(nextOverrides, overrides[variant]),
			);
	return nextOverrides;
}
var transition1 = {
	delay: 0,
	duration: 0.25,
	ease: [0.44, 0, 0.56, 1],
	type: "tween",
};
var toResponsiveImage = (value) => {
	if (
		typeof value === "object" &&
		value !== null &&
		typeof value.src === "string"
	) {
		return value;
	}
	return typeof value === "string"
		? {
				src: value,
			}
		: void 0;
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var humanReadableVariantMap = {
	Active: "Jn95M3DMW",
	Inactive: "qmHLs_fes",
};
var getProps = ({ height, id, image, tap, width, ...props }) => {
	var _humanReadableVariantMap_props_variant, _ref, _ref1;
	return {
		...props,
		Na8yZDTE3: tap !== null && tap !== void 0 ? tap : props.Na8yZDTE3,
		variant:
			(_ref =
				(_humanReadableVariantMap_props_variant =
					humanReadableVariantMap[props.variant]) !== null &&
				_humanReadableVariantMap_props_variant !== void 0
					? _humanReadableVariantMap_props_variant
					: props.variant) !== null && _ref !== void 0
				? _ref
				: "Jn95M3DMW",
		ztRBQIg9r:
			(_ref1 = image !== null && image !== void 0 ? image : props.ztRBQIg9r) !==
				null && _ref1 !== void 0
				? _ref1
				: {
						src: "https://framerusercontent.com/images/lmFollwwBANyjurh7LnOrwRjzY.webp?scale-down-to=512",
						srcSet:
							"https://framerusercontent.com/images/lmFollwwBANyjurh7LnOrwRjzY.webp?scale-down-to=512 512w,https://framerusercontent.com/images/lmFollwwBANyjurh7LnOrwRjzY.webp?scale-down-to=1024 1024w,https://framerusercontent.com/images/lmFollwwBANyjurh7LnOrwRjzY.webp 1456w",
					},
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const {
		style,
		className,
		layoutId,
		variant,
		ztRBQIg9r,
		Na8yZDTE3,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "Jn95M3DMW",
		enabledGestures,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onTaphduxwu = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (Na8yZDTE3) {
			const res = await Na8yZDTE3(...args);
			if (res === false) return false;
		}
	});
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						className={cx(
							serializationHash,
							...sharedStyleClassNames,
							"framer-ysud0u",
							className,
							classNames,
						)}
						data-framer-name={"Active"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"Jn95M3DMW"}
						onHoverEnd={() =>
							setGestureState({
								isHovered: false,
							})
						}
						onHoverStart={() =>
							setGestureState({
								isHovered: true,
							})
						}
						onTap={onTaphduxwu}
						onTapCancel={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapStart={() =>
							setGestureState({
								isPressed: true,
							})
						}
						ref={ref !== null && ref !== void 0 ? ref : ref1}
						style={{
							opacity: 1,
							...style,
						}}
						variants={{
							"qmHLs_fes-hover": {
								opacity: 0.8,
							},
							qmHLs_fes: {
								opacity: 0.4,
							},
						}}
						{...addPropertyOverrides(
							{
								"qmHLs_fes-hover": {
									"data-framer-name": void 0,
								},
								qmHLs_fes: {
									"data-framer-name": "Inactive",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<Image
							background={{
								alt: "",
								fit: "fill",
								sizes: "80px",
								...toResponsiveImage(ztRBQIg9r),
							}}
							className={"framer-16chf5y"}
							data-framer-name={"Image"}
							layoutDependency={layoutDependency}
							layoutId={"p7g0ddGHJ"}
							style={{
								borderBottomLeftRadius: 4,
								borderBottomRightRadius: 4,
								borderTopLeftRadius: 4,
								borderTopRightRadius: 4,
							}}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-Bzy4B.framer-p6hj80, .framer-Bzy4B .framer-p6hj80 { display: block; }",
	".framer-Bzy4B.framer-ysud0u { cursor: pointer; height: 46px; overflow: hidden; position: relative; width: 82px; }",
	".framer-Bzy4B .framer-16chf5y { flex: none; height: 44px; left: calc(50.00000000000002% - 80px / 2); overflow: visible; pointer-events: none; position: absolute; top: calc(50.00000000000002% - 44px / 2); width: 80px; }",
];
var FramerjXTAGtevO = withCSS(Component, css, "framer-Bzy4B");
var stdin_default = FramerjXTAGtevO;
FramerjXTAGtevO.displayName = "Gallery/Navigation Item";
FramerjXTAGtevO.defaultProps = {
	height: 46,
	width: 82,
};
addPropertyControls(FramerjXTAGtevO, {
	variant: {
		options: ["Jn95M3DMW", "qmHLs_fes"],
		optionTitles: ["Active", "Inactive"],
		title: "Variant",
		type: ControlType.Enum,
	},
	ztRBQIg9r: {
		__defaultAssetReference:
			"data:framer/asset-reference,lmFollwwBANyjurh7LnOrwRjzY.webp?originalFilename=blue-1.webp&preferredSize=auto",
		title: "Image",
		type: ControlType.ResponsiveImage,
	},
	Na8yZDTE3: {
		title: "Tap",
		type: ControlType.EventHandler,
	},
});
addFonts(
	FramerjXTAGtevO,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:gallery/navigation-item
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "qmHLs_fes",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders NavigationItemFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var navigation_item_default = ComponentWithRoot;
export { navigation_item_default as default };
