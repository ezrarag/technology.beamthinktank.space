// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * changePhoto?: {src: string, srcSet?: string, alt?: string} // Change Photo
}} Props

 */
import { routes } from "./chunks/chunk-RIZBGR4E.js";

// virtual:avatar-magical-team
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/k27l90QkjyUMGc4aOIcm/wbixjhGMd6JscXBySCAA/CC4vMIBcV.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Image,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var cycleOrder = ["pBOFsJ0E_"];
var serializationHash = "framer-iWJKB";
var variantClassNames = {
	pBOFsJ0E_: "framer-v-1azoq8s",
};
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var toResponsiveImage = (value) => {
	if (
		typeof value === "object" &&
		value !== null &&
		typeof value.src === "string"
	) {
		return value;
	}
	return typeof value === "string"
		? {
				src: value,
			}
		: void 0;
};
var transformTemplate1 = (_, t) => `translateX(-50%) ${t}`;
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var getProps = ({ changePhoto, height, id, width, ...props }) => {
	var _ref;
	return {
		...props,
		hZCLaerls:
			(_ref =
				changePhoto !== null && changePhoto !== void 0
					? changePhoto
					: props.hZCLaerls) !== null && _ref !== void 0
				? _ref
				: {
						src: "https://framerusercontent.com/images/YjtjKecOeEZppuRGchZu6xM7Bs.png",
					},
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, hZCLaerls, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "pBOFsJ0E_",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						className={cx(
							serializationHash,
							...sharedStyleClassNames,
							"framer-1azoq8s",
							className,
							classNames,
						)}
						data-framer-name={"Avatar Component"}
						layoutDependency={layoutDependency}
						layoutId={"pBOFsJ0E_"}
						onHoverEnd={() =>
							setGestureState({
								isHovered: false,
							})
						}
						onHoverStart={() =>
							setGestureState({
								isHovered: true,
							})
						}
						onTap={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapCancel={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapStart={() =>
							setGestureState({
								isPressed: true,
							})
						}
						ref={ref !== null && ref !== void 0 ? ref : ref1}
						style={{
							backgroundColor: "rgb(233, 236, 241)",
							borderBottomLeftRadius: 60,
							borderBottomRightRadius: 60,
							borderTopLeftRadius: 60,
							borderTopRightRadius: 60,
							...style,
						}}
					>
						<Image
							background={{
								alt: "",
								fit: "stretch",
								sizes: "48.5px",
								...toResponsiveImage(hZCLaerls),
								...{
									positionX: "center",
									positionY: "center",
								},
							}}
							className={"framer-1o2olif"}
							data-framer-name={"image 5"}
							layoutDependency={layoutDependency}
							layoutId={"TfilHBA_X"}
							transformTemplate={transformTemplate1}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-iWJKB.framer-1agxyk0, .framer-iWJKB .framer-1agxyk0 { display: block; }",
	".framer-iWJKB.framer-1azoq8s { height: 72px; overflow: hidden; position: relative; width: 72px; will-change: var(--framer-will-change-override, transform); }",
	".framer-iWJKB .framer-1o2olif { aspect-ratio: 0.6746987951807228 / 1; bottom: 0px; flex: none; left: 47%; position: absolute; top: 0px; width: var(--framer-aspect-ratio-supported, 49px); }",
];
var FramerCC4vMIBcV = withCSS(Component, css, "framer-iWJKB");
var stdin_default = FramerCC4vMIBcV;
FramerCC4vMIBcV.displayName = "Avatar [Magical Team]";
FramerCC4vMIBcV.defaultProps = {
	height: 72,
	width: 72,
};
addPropertyControls(FramerCC4vMIBcV, {
	hZCLaerls: {
		__defaultAssetReference:
			"data:framer/asset-reference,YjtjKecOeEZppuRGchZu6xM7Bs.png?originalFilename=image+5.png&preferredSize=auto",
		title: "Change Photo",
		type: ControlType.ResponsiveImage,
	},
});
addFonts(
	FramerCC4vMIBcV,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:avatar-magical-team
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders AvatarMagicalTeamFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var avatar_magical_team_default = ComponentWithRoot;
export { avatar_magical_team_default as default };
