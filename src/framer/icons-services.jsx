// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 5393b9314a548245 "Osaka Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Variant' | 'Variant 2' | 'Variant 3' // Variant
}} Props

 */
import { routes } from "./chunks/chunk-RIZBGR4E.js";

// virtual:icons-services
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/aVL8Wc5mT68FEC1eP6tw/50MENaovVeqKgqagQOXr/vYzSpNyRc.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Image,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var enabledGestures = {
	Bqaa5hfjn: {
		hover: true,
	},
	QycfY1jwE: {
		hover: true,
	},
	XIQcAjwze: {
		hover: true,
	},
};
var cycleOrder = ["QycfY1jwE", "XIQcAjwze", "Bqaa5hfjn"];
var serializationHash = "framer-baIIz";
var variantClassNames = {
	Bqaa5hfjn: "framer-v-tte1go",
	QycfY1jwE: "framer-v-grdf3u",
	XIQcAjwze: "framer-v-1k5aah0",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants === null || variants === void 0
		? void 0
		: variants.forEach(
				(variant) =>
					variant && Object.assign(nextOverrides, overrides[variant]),
			);
	return nextOverrides;
}
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var humanReadableVariantMap = {
	"Variant 2": "XIQcAjwze",
	"Variant 3": "Bqaa5hfjn",
	Variant: "QycfY1jwE",
};
var getProps = ({ height, id, width, ...props }) => {
	var _humanReadableVariantMap_props_variant, _ref;
	return {
		...props,
		variant:
			(_ref =
				(_humanReadableVariantMap_props_variant =
					humanReadableVariantMap[props.variant]) !== null &&
				_humanReadableVariantMap_props_variant !== void 0
					? _humanReadableVariantMap_props_variant
					: props.variant) !== null && _ref !== void 0
				? _ref
				: "QycfY1jwE",
	};
};
var createLayoutDependency = (props, variants) =>
	variants.join("-") + props.layoutDependency;
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, ...restProps } = getProps(props);
	const {
		baseVariant,
		classNames,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "QycfY1jwE",
		enabledGestures,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						className={cx(
							serializationHash,
							...sharedStyleClassNames,
							"framer-grdf3u",
							className,
							classNames,
						)}
						layoutDependency={layoutDependency}
						layoutId={"QycfY1jwE"}
						onHoverEnd={() =>
							setGestureState({
								isHovered: false,
							})
						}
						onHoverStart={() =>
							setGestureState({
								isHovered: true,
							})
						}
						onTap={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapCancel={() =>
							setGestureState({
								isPressed: false,
							})
						}
						onTapStart={() =>
							setGestureState({
								isPressed: true,
							})
						}
						ref={ref !== null && ref !== void 0 ? ref : ref1}
						style={{
							backgroundColor: "rgb(210, 236, 255)",
							borderBottomLeftRadius: 120,
							borderBottomRightRadius: 120,
							borderTopLeftRadius: 120,
							borderTopRightRadius: 120,
							...style,
						}}
						variants={{
							Bqaa5hfjn: {
								backgroundColor: "rgb(235, 216, 255)",
							},
							XIQcAjwze: {
								backgroundColor: "rgb(255, 233, 153)",
							},
						}}
						{...addPropertyOverrides(
							{
								"Bqaa5hfjn-hover": {
									"data-framer-name": void 0,
								},
								"XIQcAjwze-hover": {
									"data-framer-name": void 0,
								},
								Bqaa5hfjn: {
									"data-framer-name": "Variant 3",
								},
								XIQcAjwze: {
									"data-framer-name": "Variant 2",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<Image
							background={{
								alt: "",
								fit: "fill",
								intrinsicHeight: 73,
								intrinsicWidth: 72,
								pixelHeight: 73,
								pixelWidth: 72,
								src: "https://framerusercontent.com/images/jlfJAqpHuBLRTwtfqrLRbCR1go.svg",
							}}
							className={"framer-jkgu8h"}
							layoutDependency={layoutDependency}
							layoutId={"ja4TBp7o4"}
							{...addPropertyOverrides(
								{
									Bqaa5hfjn: {
										background: {
											alt: "",
											fit: "fill",
											intrinsicHeight: 72,
											intrinsicWidth: 72,
											pixelHeight: 72,
											pixelWidth: 72,
											src: "https://framerusercontent.com/images/btMEDJLObCXuxPKcxjq8N4G7mo.svg",
										},
									},
									XIQcAjwze: {
										background: {
											alt: "",
											fit: "fill",
											intrinsicHeight: 73,
											intrinsicWidth: 72,
											pixelHeight: 73,
											pixelWidth: 72,
											src: "https://framerusercontent.com/images/jYrg1FsPECSA4yAtN7pZaD1BUY.svg",
										},
									},
								},
								baseVariant,
								gestureVariant,
							)}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-baIIz.framer-pps0ky, .framer-baIIz .framer-pps0ky { display: block; }",
	".framer-baIIz.framer-grdf3u { cursor: pointer; height: 138px; overflow: hidden; position: relative; width: 138px; will-change: var(--framer-will-change-override, transform); }",
	".framer-baIIz .framer-jkgu8h { bottom: 34px; flex: none; left: 31px; overflow: visible; position: absolute; right: 35px; top: 32px; }",
	".framer-baIIz.framer-v-grdf3u.hover .framer-jkgu8h, .framer-baIIz.framer-v-1k5aah0.hover .framer-jkgu8h, .framer-baIIz.framer-v-tte1go.hover .framer-jkgu8h { aspect-ratio: 1 / 1; bottom: unset; height: var(--framer-aspect-ratio-supported, 84px); left: 27px; right: 27px; top: 27px; }",
];
var FramervYzSpNyRc = withCSS(Component, css, "framer-baIIz");
var stdin_default = FramervYzSpNyRc;
FramervYzSpNyRc.displayName = "Icons [Services]";
FramervYzSpNyRc.defaultProps = {
	height: 138,
	width: 138,
};
addPropertyControls(FramervYzSpNyRc, {
	variant: {
		options: ["QycfY1jwE", "XIQcAjwze", "Bqaa5hfjn"],
		optionTitles: ["Variant", "Variant 2", "Variant 3"],
		title: "Variant",
		type: ControlType.Enum,
	},
});
addFonts(
	FramervYzSpNyRc,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:icons-services
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "Bqaa5hfjn",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders IconsServicesFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"5393b9314a5482450bd063fdec2abaa51e33580d8faa88cac3362a540b16df77"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var icons_services_default = ComponentWithRoot;
export { icons_services_default as default };
